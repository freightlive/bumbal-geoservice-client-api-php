<?php
/**
 * GeocodingApi
 * PHP version 5
 *
 * @category Class
 * @package  GeoService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bumbal GeoService
 *
 * Bumbal GeoService API documentation
 *
 * OpenAPI spec version: 1.0
 * Contact: jurgen@bumbal.eu
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace GeoService\API;

use \GeoService\ApiClient;
use \GeoService\ApiException;
use \GeoService\Configuration;
use \GeoService\ObjectSerializer;

/**
 * GeocodingApi Class Doc Comment
 *
 * @category Class
 * @package  GeoService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeocodingApi
{
    /**
     * API Client
     *
     * @var \GeoService\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \GeoService\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\GeoService\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \GeoService\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \GeoService\ApiClient $apiClient set the API client
     *
     * @return GeocodingApi
     */
    public function setApiClient(\GeoService\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation geoCoding
     *
     * GeoCoding
     *
     * @param string $city City (required)
     * @param string $iso_country Country in ISO 3166-1 alpha 2 (required)
     * @param string $zipcode Zipcode (optional)
     * @param string $street Street (optional)
     * @param string $house_nr House Number (optional)
     * @param string $preferred_provider Prioritize provider (optional)
     * @throws \GeoService\ApiException on non-2xx response
     * @return \GeoService\Model\GeoDataModel
     */
    public function geoCoding($city, $iso_country, $zipcode = null, $street = null, $house_nr = null, $preferred_provider = null)
    {
        list($response) = $this->geoCodingWithHttpInfo($city, $iso_country, $zipcode, $street, $house_nr, $preferred_provider);
        return $response;
    }

    /**
     * Operation geoCodingWithHttpInfo
     *
     * GeoCoding
     *
     * @param string $city City (required)
     * @param string $iso_country Country in ISO 3166-1 alpha 2 (required)
     * @param string $zipcode Zipcode (optional)
     * @param string $street Street (optional)
     * @param string $house_nr House Number (optional)
     * @param string $preferred_provider Prioritize provider (optional)
     * @throws \GeoService\ApiException on non-2xx response
     * @return array of \GeoService\Model\GeoDataModel, HTTP status code, HTTP response headers (array of strings)
     */
    public function geoCodingWithHttpInfo($city, $iso_country, $zipcode = null, $street = null, $house_nr = null, $preferred_provider = null)
    {
        // verify the required parameter 'city' is set
        if ($city === null) {
            throw new \InvalidArgumentException('Missing the required parameter $city when calling geoCoding');
        }
        // verify the required parameter 'iso_country' is set
        if ($iso_country === null) {
            throw new \InvalidArgumentException('Missing the required parameter $iso_country when calling geoCoding');
        }
        // parse inputs
        $resourcePath = "/geocode";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($zipcode !== null) {
            $queryParams['zipcode'] = $this->apiClient->getSerializer()->toQueryValue($zipcode);
        }
        // query params
        if ($street !== null) {
            $queryParams['street'] = $this->apiClient->getSerializer()->toQueryValue($street);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = $this->apiClient->getSerializer()->toQueryValue($city);
        }
        // query params
        if ($house_nr !== null) {
            $queryParams['house_nr'] = $this->apiClient->getSerializer()->toQueryValue($house_nr);
        }
        // query params
        if ($iso_country !== null) {
            $queryParams['iso_country'] = $this->apiClient->getSerializer()->toQueryValue($iso_country);
        }
        // query params
        if ($preferred_provider !== null) {
            $queryParams['preferred_provider'] = $this->apiClient->getSerializer()->toQueryValue($preferred_provider);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('apikey');
        if (strlen($apiKey) !== 0) {
            $headerParams['apikey'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\GeoService\Model\GeoDataModel',
                '/geocode'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\GeoService\Model\GeoDataModel', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GeoService\Model\GeoDataModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GeoService\Model\ApiErrorResponseModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\GeoService\Model\ApiErrorResponseModel', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
